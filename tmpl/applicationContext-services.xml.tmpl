<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-2.5.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect
				</prop>
				<prop key="hibernate.connection.provider_class">
					org.hibernate.connection.C3P0ConnectionProvider
				</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.use_outer_join">false</prop>
				<!-- Auto reconnect after long inactivity -->
				<prop key="connection.autoReconnect">true</prop>
				<prop key="connection.autoReconnectForPools">true</prop>
				<prop key="connection.is-connection-validation-required">
					true
				</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>org/ncbo/stanford/domain/custom/NcboTypeDef.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboOntologyFile.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboUser.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboUserRole.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboLRole.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboAdminApplication.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboLAppTextDatatype.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboAppText.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboOntologyLoadQueue.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboLStatus.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboUsageLog.hbm.xml</value>				
				<value>org/ncbo/stanford/domain/generated/NcboLUsageEventType.hbm.xml</value>
				<value>org/ncbo/stanford/domain/generated/NcboUserSubscriptions.hbm.xml</value>	
				<value>org/ncbo/stanford/domain/generated/NcboLNotificationType.hbm.xml</value>				
			</list>
		</property>
	</bean>

	<bean id="jdbcExceptionTranslator"
		class="org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!--
		We are using HibernateTemplate for 90% to 95% or so of database
		access. The JdbcTemplate is for when we can't use Hibernate. Don't use
		JDBC directly! Use the JdbcTemplate as it handles JDBC cleanup.
	-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="jdbcExceptionTranslator">
			<ref bean="jdbcExceptionTranslator" />
		</property>
	</bean>

	<!-- This is the base definition for all Hibernate based DAOs -->
	<bean id="hibernateDaoSupport"
		class="org.springframework.orm.hibernate3.support.HibernateDaoSupport"
		abstract="true">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<!--
			You could use the configured Hibernate template or create a new
			mapping that uses a configured hibernate template.
			HibernateDaoSupport creates a HibernateTempalte with the default
			settings.
		-->
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<!-- Hibernate Transaction Manager Definition -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!--  Adding annotation Driven for Transcation management -->
	<!--
		enable the configuration of transactional behavior based on
		annotations
	-->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--

		<aop:config>
			<aop:pointcut id="ontologyLoadSchedulerMethods"
				expression="execution(*org.ncbo.stanford.service.loader.scheduler.OntologyLoadSchedulerService.*(..))"/>
			<aop:advisor advice-ref="txAdvice"
				pointcut-ref="ontologyLoadSchedulerMethods"/>
		</aop:config>
		
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="parseOntologies" propagation="NOT_SUPPORTED"/>
				<tx:method name="processRecord"	propagation="REQUIRES_NEW"/>
			</tx:attributes>
		</tx:advice>
	-->

	<!--
		Custom DAOs begin here. Please remove the autogenerated DAO bean
		declaration if you have created a custom DAO that extends the orginial
		DAO
	-->
	<bean id="NcboOntologyFileDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyFileDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUserRoleDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboUserRoleDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUserDAO" class="org.ncbo.stanford.domain.custom.dao.CustomNcboUserDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLRoleDAO" class="org.ncbo.stanford.domain.custom.dao.CustomNcboLRoleDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboAdminApplicationDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboAdminApplicationDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLAppTextDatatypeDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLAppTextDatatypeDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboAppTextDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboAppTextDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyLoadQueueDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyLoadQueueDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLStatusDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLStatusDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUsageLogDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboUsageLogDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
	
	<bean id="NcboLUsageEventTypeDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLUsageEventTypeDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
	
	<bean id="ncboOntologyFileDAO" class="org.ncbo.stanford.domain.generated.NcboOntologyFileDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUserSubscriptionsDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboUserSubscriptionsDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLNotificationTypeDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLNotificationTypeDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
	
	<!-- Encryption -->

	<bean id="stringEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="algorithm">
			<value>PBEWithMD5AndTripleDES</value>
		</property>
		<property name="password">
			<ref bean="encryptionKey" />
		</property>
	</bean>

    <bean id="jasyptPasswordEncryptor" class="org.jasypt.util.password.StrongPasswordEncryptor" />

   <bean id="passwordEncoder" class="org.jasypt.spring.security2.PasswordEncoder">
      <property name="passwordEncryptor">
        <ref bean="jasyptPasswordEncryptor" />
      </property>
   </bean>

	<!-- Hibernate String Encryptor -->
	<bean id="hibernateStringEncryptor"
		class="org.jasypt.hibernate.encryptor.HibernatePBEStringEncryptor">
		<property name="registeredName">
			<value>hibernateStringEncryptor</value>
		</property>
		<property name="encryptor">
			<ref bean="stringEncryptor" />
		</property>
	</bean>

	<bean id="encryptionService"
		class="org.ncbo.stanford.service.encryption.impl.EncryptionServiceImpl">
		<property name="stringEncryptor">
			<ref bean="stringEncryptor" />
		</property>
		<property name="passwordEncoder">
			<ref local="passwordEncoder" />
		</property>
	</bean>

	<!-- Encryption ends here -->

	<!-- Message bundle -->
	<bean id="messageBundleName" class="java.lang.String">
		<constructor-arg>
			<value>@messagebundlepackage@</value>
		</constructor-arg>
	</bean>

	<bean id="messageUtils" class="org.ncbo.stanford.util.MessageUtils">
		<constructor-arg ref="messageBundleName" index="0" />
	</bean>

	<!-- Ontology format handler map -->
	<util:map id="ontologyFormatHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_DL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_FULL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_LITE" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_PROTEGE" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OBO" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_UMLS_RRF" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_LEXGRID_XML" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
	</util:map>

	<!-- Ontology handler maps -->
	<util:map id="ontologyLoadHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyLoadManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyLoadManagerProtege" />
		</entry>
	</util:map>

	<util:map id="ontologyRetrievalHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyRetrievalManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyRetrievalManagerProtege" />
		</entry>
	</util:map>

	<!-- Managers -->
	<bean id="abstractOntologyManagerLexGrid"
		class="org.ncbo.stanford.manager.AbstractOntologyManagerLexGrid"
		abstract="true">
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
	</bean>

	<bean id="abstractOntologyManagerProtege"
		class="org.ncbo.stanford.manager.AbstractOntologyManagerProtege"
		abstract="true">
		<property name="protegeServerEnabled">
			<ref bean="protegeServerEnabled"/>
		</property>
		<property name="protegeServerHostname">
			<ref bean="protegeServerHostname"/>
		</property>
		<property name="protegeServerPort">
			<ref bean="protegeServerPort"/>
		</property>
		<property name="protegeServerUsername">
			<ref bean="protegeServerUsername"/>
		</property>
		<property name="protegeServerPassword">
			<ref bean="protegeServerPassword"/>
		</property>
		<property name="protegeServerMetaProjectName">
			<ref bean="protegeServerMetaProjectName"/>
		</property>
		<property name="protegeJdbcUrl">
			<ref bean="protegeJdbcUrl" />
		</property>
		<property name="protegeJdbcDriver">
			<ref bean="protegeJdbcDriver" />
		</property>
		<property name="protegeJdbcUsername">
			<ref bean="protegeJdbcUsername" />
		</property>
		<property name="protegeJdbcPassword">
			<ref bean="protegeJdbcPassword" />
		</property>
		<property name="protegeTablePrefix">
			<ref bean="protegeTablePrefix" />
		</property>
		<property name="protegeTableSuffix">
			<ref bean="protegeTableSuffix" />
		</property>
		<property name="protegeBigFileThreshold">
			<ref bean="protegeBigFileThreshold" />
		</property>
		<property name="metadataUserInstPrefix">
			<ref bean="metadataUserInstPrefix" />
		</property>
		<property name="metadataUserInstSuffix">
			<ref bean="metadataUserInstSuffix" />
		</property>
		<property name="metadataOntologyDomainInstPrefix">
			<ref bean="metadataOntologyDomainInstPrefix" />
		</property>
		<property name="metadataOntologyDomainInstSuffix">
			<ref bean="metadataOntologyDomainInstSuffix" />
		</property>
		<property name="metadataOntologyGroupInstPrefix">
			<ref bean="metadataOntologyGroupInstPrefix" />
		</property>
		<property name="metadataOntologyGroupInstSuffix">
			<ref bean="metadataOntologyGroupInstSuffix" />
		</property>
		<property name="metadataOntologyInstPrefix">
			<ref bean="metadataOntologyInstPrefix" />
		</property>
		<property name="metadataOntologyInstSuffix">
			<ref bean="metadataOntologyInstSuffix" />
		</property>
		<property name="metadataOntologyViewInstPrefix">
			<ref bean="metadataOntologyViewInstPrefix" />
		</property>
		<property name="metadataOntologyViewInstSuffix">
			<ref bean="metadataOntologyViewInstSuffix" />
		</property>
		<property name="metadataVirtualOntologyInstPrefix">
			<ref bean="metadataVirtualOntologyInstPrefix" />
		</property>
		<property name="metadataVirtualOntologyInstSuffix">
			<ref bean="metadataVirtualOntologyInstSuffix" />
		</property>
		<property name="metadataVirtualViewInstPrefix">
			<ref bean="metadataVirtualViewInstPrefix" />
		</property>
		<property name="metadataVirtualViewInstSuffix">
			<ref bean="metadataVirtualViewInstSuffix" />
		</property>
		<property name="protegeKnowledgeBases">
			<ref bean="protegeKnowledgeBaseCache" />
		</property>
	</bean>

	<bean id="ontologyRetrievalManagerLexGrid"
		class="org.ncbo.stanford.manager.retrieval.impl.OntologyRetrievalManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
		<property name="allConceptsMaxPageSize">
			<ref bean="allConceptsMaxPageSize" />
		</property>
	</bean>

	<bean id="ontologyRetrievalManagerProtege"
		class="org.ncbo.stanford.manager.retrieval.impl.OntologyRetrievalManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
		<property name="allConceptsMaxPageSize">
			<ref bean="allConceptsMaxPageSize" />
		</property>
	</bean>

	<bean id="ontologyLoadManagerLexGrid"
		class="org.ncbo.stanford.manager.load.impl.OntologyLoadManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="ontologyLoadManagerProtege"
		class="org.ncbo.stanford.manager.load.impl.OntologyLoadManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
	</bean>

	<bean id="ontologyDiffManagerProtege"
		class="org.ncbo.stanford.manager.diff.impl.OntologyDiffManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
	</bean>

	<bean id="ontologyDiffManagerLexGrid"
		class="org.ncbo.stanford.manager.diff.impl.OntologyDiffManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
		<property name="ontologyDiffManagerProtege">
			<ref bean="ontologyDiffManagerProtege" />
		</property>
	</bean>

	<bean id="ontologyMetricsManagerProtege"
		class="org.ncbo.stanford.manager.metrics.impl.OntologyMetricsManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<bean id="ontologyMetricsManagerLexGrid"
		class="org.ncbo.stanford.manager.metrics.impl.OntologyMetricsManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="obsManager" class="org.ncbo.stanford.manager.obs.impl.OBSManagerImpl">
		<property name="xmlSerializationService">
			<ref bean="xmlSerializationService" />
		</property>
	</bean>

	<bean id="ontologyMetadataManager"
		class="org.ncbo.stanford.manager.metadata.impl.OntologyMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<bean id="notesPool"
		class="org.ncbo.stanford.manager.notes.impl.NotesPoolImpl">
		<property name="notesJdbcUrl">
			<ref bean="notesJdbcUrl" />
		</property>
		<property name="notesJdbcDriver">
			<ref bean="notesJdbcDriver" />
		</property>
		<property name="notesJdbcUsername">
			<ref bean="notesJdbcUsername" />
		</property>
		<property name="notesJdbcPassword">
			<ref bean="notesJdbcPassword" />
		</property>
	</bean>

	<bean id="ontologyCategoryMetadataManager"
		class="org.ncbo.stanford.manager.metadata.impl.OntologyCategoryMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<bean id="ontologyGroupMetadataManager"
		class="org.ncbo.stanford.manager.metadata.impl.OntologyGroupMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>
	
	<bean id="projectMetadataManager"
		class="org.ncbo.stanford.manager.metakb.protege.ProjectMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>
	
	<bean id="projectMetadataService"
		class="org.ncbo.stanford.service.metadata.impl.ProjectMetadataServiceImpl">
		<property name="projectMetadataManager">
			<ref bean="projectMetadataManager"/>
		</property>
	</bean>
	
	<bean id="reviewMetadataManager"
		class="org.ncbo.stanford.manager.metakb.protege.ReviewMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>
	
	<bean id="reviewMetadataService"
		class="org.ncbo.stanford.service.metadata.impl.ReviewMetadataServiceImpl">
		<property name="reviewMetadataManager">
			<ref bean="reviewMetadataManager" />
		</property>
	</bean>

	<!-- Application Services -->
	<bean id="userService" class="org.ncbo.stanford.service.user.impl.UserServiceImpl">
		<property name="ncboUserDAO">
			<ref bean="NcboUserDAO" />
		</property>
		<property name="ncboLRoleDAO">
			<ref bean="NcboLRoleDAO" />
		</property>
		<property name="ncboUserRoleDAO">
			<ref bean="NcboUserRoleDAO" />
		</property>
		<property name="encryptionService">
			<ref bean="encryptionService" />
		</property>
		<property name="userMetadataManager">
			<ref bean="userMetadataManager" />
		</property>
	</bean>
	<!--Adding For SubscriptionsService-->
	<bean id="subscriptionsService" class="org.ncbo.stanford.service.subscriptions.impl.SubscriptionsServiceImpl">
		<property name="ncboUserSubscriptionsDAO">
			<ref bean="NcboUserSubscriptionsDAO" />
		</property>
		<property name="ncboLNotificationTypeDAO">
			<ref bean="NcboLNotificationTypeDAO" />
		</property>
		<property name="mailService">
			<ref bean="mailService" />
		</property> 
		<property name="textManager">
			<ref local="textManager"/>
		</property>
		<property name="ncboUserDAO">
			<ref local="NcboUserDAO"/>
		</property>  
		
	</bean>
	<!-- Adding For UserMetadata -->
	<bean id="userMetadataManager"
		class="org.ncbo.stanford.manager.metadata.impl.UserMetadataManagerImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<bean id="conceptService"
		class="org.ncbo.stanford.service.concept.impl.ConceptServiceImpl">
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyRetrievalHandlerMap">
			<ref local="ontologyRetrievalHandlerMap" />
		</property>
		<property name="obsManager">
			<ref local="obsManager" />
		</property>
		<property name="ontologyMetadataManager">
			<ref local="ontologyMetadataManager" />
		</property>
	</bean>
	
	<bean id="conceptPropertyService"
		class="org.ncbo.stanford.service.cuiconcept.impl.ConceptPropertyServiceImpl">
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyRetrievalHandlerMap">
			<ref local="ontologyRetrievalHandlerMap" />
		</property>
		<property name="ontologyMetadataManager">
			<ref local="ontologyMetadataManager" />
		</property>
		<property name="conceptService">
			<ref local="conceptService" />
		</property>
		<property name="queryService">
			<ref bean="querySearchService" />
		</property>
	</bean>

	<bean id="dumpRDFService"
	    class="org.ncbo.stanford.service.concept.impl.DumpRDFServiceImpl"
	    parent="conceptService">
	</bean>
	
	<bean id="rdfService"
	    class="org.ncbo.stanford.service.concept.impl.RdfServiceImpl"
	    parent="conceptService">
	</bean>

	<bean id="abstractOntologyService"
		class="org.ncbo.stanford.service.ontology.AbstractOntologyService"
		abstract="true">
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyLoadHandlerMap">
			<ref local="ontologyLoadHandlerMap" />
		</property>
		<property name="ncboOntologyLoadQueueDAO">
			<ref bean="NcboOntologyLoadQueueDAO" />
		</property>
		<property name="ncboOntologyFileDAO">
			<ref bean="NcboOntologyFileDAO" />
		</property>
		<property name="indexService">
			<ref bean="indexSearchService" />
		</property>
		<property name="metricsService">
			<ref local="metricsService" />
		</property>
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
	</bean>

	<bean id="ontologyService"
		class="org.ncbo.stanford.service.ontology.impl.OntologyServiceMetadataImpl"
		parent="abstractOntologyService">
		<property name="ontologyCategoryMetadataManager">
			<ref bean="ontologyCategoryMetadataManager" />
		</property>
		<property name="ontologyGroupMetadataManager">
			<ref bean="ontologyGroupMetadataManager" />
		</property>
	</bean>

	<bean id="diffService" class="org.ncbo.stanford.service.diff.impl.DiffServiceImpl">
		<property name="ontologyService">
			<ref bean="ontologyService" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyDiffHandlerMap">
			<ref local="ontologyDiffHandlerMap" />
		</property>
	</bean>

	<bean id="metricsService"
		class="org.ncbo.stanford.service.metrics.impl.MetricsServiceImpl">
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref bean="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyMetricsHandlerMap">
			<ref bean="ontologyMetricsHandlerMap" />
		</property>
	</bean>

	<bean id="notesService"
		class="org.ncbo.stanford.service.notes.impl.NotesServiceImpl">
		<property name="notesPool">
			<ref bean="notesPool" />
		</property>
	</bean>

	<bean id="usageLoggingService"
		class="org.ncbo.stanford.service.logging.impl.UsageLoggingServiceImpl">
		<property name="ncboUsageLogDAO">
			<ref bean="NcboUsageLogDAO" />
		</property>
		<property name="ncboLUsageEventTypeDAO">
			<ref bean="NcboLUsageEventTypeDAO" />
		</property>
	</bean>
	<bean id="ontologyLoadSchedulerService"
		class="org.ncbo.stanford.service.loader.scheduler.impl.OntologyLoadSchedulerServiceImpl"
		parent="abstractOntologyService">
		<property name="ontologyDiffHandlerMap">
			<ref local="ontologyDiffHandlerMap" />
		</property>
		<property name="ontologyMetricsHandlerMap">
			<ref local="ontologyMetricsHandlerMap" />
		</property>
	</bean>

	<bean id="oboCVSPullService"
		class="org.ncbo.stanford.service.loader.remote.impl.OBOCVSPullServiceImpl">
		<property name="ontologyService">
			<ref bean="ontologyService" />
		</property>
		<property name="userService">
			<ref bean="userService" />
		</property>
		<property name="ontologyFormatToOBOFoundryMap">
			<ref local="ontologyFormatToOBOFoundryMap" />
		</property>
		<property name="ontologyVersionStatusToOBOFoundryMap">
			<ref local="ontologyVersionStatusToOBOFoundryMap" />
		</property>
		<property name="ontologyFoundryToOBOFoundryMap">
			<ref local="ontologyFoundryToOBOFoundryMap" />
		</property>
		<property name="tempDir">
			<ref bean="tempDir" />
		</property>
		<property name="oboRepositoriesConfigFilepath">
			<ref bean="oboRepositoriesConfigFilepath" />
		</property>
	</bean>
	
	<!-- Search related beans -->
	<bean id="abstractSearchService" class="org.ncbo.stanford.service.search.AbstractSearchService"
		abstract="true">
		<property name="analyzer">
			<ref bean="searchAnalyzer" />
		</property>
		<property name="indexPath">
			<ref bean="searchIndexPath" />
		</property>
		<property name="defMaxNumHits">
			<value>@bioportalsearchdefmaxnumhits@</value>
		</property>
		<property name="searchResultCache">
			<ref bean="paginatableCache" />
		</property>
		<property name="ontologyMetadataManager">
			<ref bean="ontologyMetadataManager" />
		</property>
		<property name="ontologyRetrievalHandlerMap">
			<ref local="ontologyRetrievalHandlerMap" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologySearchHandlerMap">
			<ref local="ontologySearchHandlerMap" />
		</property>
	</bean>

	<bean id="querySearchService"
		class="org.ncbo.stanford.service.search.impl.QuerySearchServiceImpl"
		parent="abstractSearchService">
	</bean>

	<bean id="indexSearchService"
		class="org.ncbo.stanford.service.search.impl.IndexSearchServiceImpl"
		parent="abstractSearchService">
		<property name="indexBackupPath">
			<ref bean="searchIndexBackupPath" />
		</property>
		<property name="indexMergeFactor">
			<value>@bioportalsearchindexmergefactor@</value>
		</property>
		<property name="indexMaxMergeDocs">
			<value>@bioportalsearchindexmaxmergedocs@</value>
		</property>
	</bean>

	<bean id="searchAnalyzer" class="org.apache.lucene.analysis.standard.StandardAnalyzer" />

	<bean id="searchIndexPath" class="java.lang.String">
		<constructor-arg>
			<value>@bioportalsearchindexpath@</value>
		</constructor-arg>
	</bean>

	<bean id="searchIndexBackupPath" class="java.lang.String">
		<constructor-arg>
			<value>@bioportalsearchindexbackuppath@</value>
		</constructor-arg>
	</bean>

	<util:map id="ontologyDiffHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyDiffManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyDiffManagerProtege" />
		</entry>
	</util:map>

	<util:map id="ontologyMetricsHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyMetricsManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyMetricsManagerProtege" />
		</entry>
	</util:map>

	<util:map id="ontologySearchHandlerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologySearchManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologySearchManagerProtege" />
		</entry>
	</util:map>

	<bean id="ontologySearchManagerLexGrid"
		class="org.ncbo.stanford.manager.search.impl.OntologySearchManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="ontologySearchManagerProtege"
		class="org.ncbo.stanford.manager.search.impl.OntologySearchManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<!-- Caches -->

	<!--
		Cache to be used for all paginatable lists, such as ontology lists or
		search results
	-->
	<bean id="paginatableExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.SimpleExpirationHandler" />

	<bean id="paginatableHashbeltContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.StandardHashbeltContainerFactory" />

	<bean id="paginatableCache"
		class="org.ncbo.stanford.util.cache.expiration.system.impl.UpdatingHashbeltExpirationSystem">
		<constructor-arg index="0">
			<value>PaginatableCache</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>@bioportalpaginatablecachenumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="paginatableExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="3">
			<ref bean="paginatableHashbeltContainerFactory" />
		</constructor-arg>
	</bean>

	<!-- Protege knowledge base cache -->
	<bean id="protegeKnowledgeBaseExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.ProtegeKnowledgeBaseExpirationHandler" />

	<bean id="protegeKnowledgeBaseContainerFactoryBase"
		class="org.ncbo.stanford.util.cache.container.impl.FastIteratingHashbeltContainerFactory" />

	<bean id="protegeKnowledgeBaseContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.ProtegeKnowledgeBaseContainerFactory">
		<property name="baseFactory">
			<ref bean="protegeKnowledgeBaseContainerFactoryBase" />
		</property>
	</bean>

	<bean id="protegeKnowledgeBaseCache"
		class="org.ncbo.stanford.util.cache.expiration.system.impl.LimitHashbeltExpirationSystem">
		<constructor-arg index="0">
			<value>ProtegeKnowledgeBaseCache</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>@protegeknowledgebasecachenumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="protegeKnowledgeBaseExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="3">
			<ref bean="protegeKnowledgeBaseContainerFactory" />
		</constructor-arg>
		<constructor-arg index="4">
			<value>@protegeknowledgebasecachemaxobjects@</value>
		</constructor-arg>
	</bean>

	<!-- Session Management -->
	<bean id="sessionExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.SimpleExpirationHandler" />

	<bean id="sessionHashbeltContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.HashlistBasedHashbeltContainerFactory" />

	<bean id="sessionService"
		class="org.ncbo.stanford.service.session.impl.SessionServiceImpl">
		<constructor-arg index="0">
			<value>@bioportalsessionnumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="sessionExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="sessionHashbeltContainerFactory" />
		</constructor-arg>
	</bean>

	<bean id="textManager" scope="prototype"
		class="org.ncbo.stanford.util.textmanager.service.impl.TextManagerImpl">
		<property name="ncboAppTextDAO">
			<ref bean="NcboAppTextDAO" />
		</property>
	</bean>

	<bean id="xmlSerializationService"
		class="org.ncbo.stanford.service.xml.impl.XMLSerializationServiceImpl">
		<property name="xmlSerializer">
			<ref bean="xmlSerializer" />
		</property>
	</bean>

	<bean id="xmlSerializer" class="com.thoughtworks.xstream.XStream">
	</bean>

	<!-- Scheduled Jobs -->

	<!-- Paginatable Cache Expiration -->
	<bean id="paginatableCacheJobDetailBean" 
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="paginatableCache" />
		<property name="targetMethod" value="expireObjects" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="paginatableCacheSimpleTrigger" 
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="paginatableCacheJobDetailBean" />
		<property name="startDelay" value="@bioportalpaginatablecachetimeout@" />
		<property name="repeatInterval" value="@bioportalpaginatablecachetimeout@" />
	</bean>

	<bean id="paginatableCacheFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="paginatableCacheFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="paginatableCacheSimpleTrigger" />
			</list>
		</property>
	</bean>

	<!-- Protege KnowledgeBase Cache Expiration -->
	<bean id="protegeKnowledgeBaseCacheJobDetailBean" 
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="protegeKnowledgeBaseCache" />
		<property name="targetMethod" value="expireObjects" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="protegeKnowledgeBaseCacheSimpleTrigger" 
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="protegeKnowledgeBaseCacheJobDetailBean" />
		<property name="startDelay" value="@protegeknowledgebasecachetimeout@" />
		<property name="repeatInterval" value="@protegeknowledgebasecachetimeout@" />
	</bean>

	<bean id="protegeKnowledgeBaseCacheFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="protegeKnowledgeBaseCacheFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="protegeKnowledgeBaseCacheSimpleTrigger" />
			</list>
		</property>
	</bean>

	<!-- User Session Expiration -->
	<bean id="userSessionJobDetailBean" 
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="sessionService" />
		<property name="targetMethod" value="expireObjects" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="userSessionSimpleTrigger" 
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="userSessionJobDetailBean" />
		<property name="startDelay" value="@bioportalsessiontimeout@" />
		<property name="repeatInterval" value="@bioportalsessiontimeout@" />
	</bean>

	<bean id="userSessionFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="userSessionFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="userSessionSimpleTrigger" />
			</list>
		</property>
	</bean>

	<!-- Ping Protege Server -->
	<bean id="pingProtegeServerJobDetailBean" 
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="ontologyMetadataManager" />
		<property name="targetMethod" value="pingProtegeServer" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="pingProtegeServerSimpleTrigger" 
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="pingProtegeServerJobDetailBean" />
		<!-- 30 seconds delay before first ping -->
		<property name="startDelay" value="30000" />
		<property name="repeatInterval">
			<ref bean="protegeServerPingInterval"/>
		</property>
	</bean>

	<bean id="pingProtegeServerAutoStartup" class="java.lang.Boolean">
		<constructor-arg>
			<ref bean="protegeServerEnabled"/>
		</constructor-arg>
	</bean>

	<bean id="pingProtegeServerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="pingProtegeServerFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="pingProtegeServerSimpleTrigger" />
			</list>
		</property>
		<property name="autoStartup">
			<ref bean="pingProtegeServerAutoStartup" />
		</property>
	</bean>

	<!-- Ontology parse scheduler -->
	<bean id="ontologyParseSchedulerJobDetailBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="ontologyLoadSchedulerService" />
		<property name="targetMethod" value="parseOntologies" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="ontologyParseCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="ontologyParseSchedulerJobDetailBean" />
		<property name="cronExpression" value="@ontologyparseschedulercronexpression@" />
	</bean>

	<bean id="ontologyParseSchedulerAutoStartup" class="java.lang.Boolean">
		<constructor-arg value="@ontologyparseschedulerenabled@" />
	</bean>

	<bean id="ontologyParseSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="ontologyParseSchedulerFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="ontologyParseCronTrigger" />
			</list>
		</property>
		<property name="autoStartup">
			<ref bean="ontologyParseSchedulerAutoStartup" />
		</property>
	</bean>

	<!-- OBO CVS pull scheduler -->
	<bean id="oboPullSchedulerJobDetailBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="oboCVSPullService" />
		<property name="targetMethod" value="doOntologyPull" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="oboPullCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="oboPullSchedulerJobDetailBean" />
		<property name="cronExpression" value="@obopullschedulercronexpression@" />
	</bean>

	<bean id="oboPullSchedulerAutoStartup" class="java.lang.Boolean">
		<constructor-arg value="@obopullschedulerenabled@" />
	</bean>

	<bean id="oboPullSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="oboPullSchedulerFactoryBean" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="triggers">
			<list>
				<ref bean="oboPullCronTrigger" />
			</list>
		</property>
		<property name="autoStartup">
			<ref bean="oboPullSchedulerAutoStartup" />
		</property>
	</bean>

	<!-- Constants -->

	<!--
		Maps format in the OBO Foundry to the application ontology formats
	-->
	<util:map id="ontologyFormatToOBOFoundryMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>obo</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OBO" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>owl</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>protege</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_PROTEGE" />
		</entry>
	</util:map>

	<!-- Maps status in OBO Foundry to the application version status -->
	<util:map id="ontologyVersionStatusToOBOFoundryMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Active</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Inactive</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Production and review</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Discussion and review</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Quiescent</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
	</util:map>

	<!--
		Maps foundry preference in OBO Foundry to the application TRUE/FALSE
		status
	-->
	<util:map id="ontologyFoundryToOBOFoundryMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Yes</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.TRUE" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>No</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FALSE" />
		</entry>
	</util:map>

	<!-- Encryption Key -->
	<bean id="encryptionKey" class="java.lang.String">
		<constructor-arg>
			<value>@encryptionkey@</value>
		</constructor-arg>
	</bean>

	<!-- Temporary directory on the server -->
	<bean id="tempDir" class="java.lang.String">
		<constructor-arg>
			<value>@bioportaltempdir@</value>
		</constructor-arg>
	</bean>
	
	<!-- Protege Server Configuation -->
	<bean id="protegeServerEnabled" class="java.lang.Boolean">
		<constructor-arg value="@protegeserverenabled@"/>
	</bean>

	<bean id="protegeServerHostname" class="java.lang.String">
		<constructor-arg value="@protegeserverhostname@"/>
	</bean>
	
	<bean id="protegeServerPort" class="java.lang.String">
		<constructor-arg value="@protegeserverport@"/>
	</bean>
	
	<bean id="protegeServerUsername" class="java.lang.String">
		<constructor-arg value="@protegeserverusername@"/>
	</bean>
	
	<bean id="protegeServerPassword" class="java.lang.String">
		<constructor-arg value="@protegeserverpassword@"/>
	</bean>
	
	<bean id="protegeServerMetaProjectName" class="java.lang.String">
		<constructor-arg value="@protegeservermetaprojectname@"/>
	</bean>

	<bean id="protegeServerPingInterval" class="java.lang.Long">
		<constructor-arg value="@protegeserverpinginterval@"/>
	</bean>

	<!-- Protege DB Configuation -->
	<bean id="protegeJdbcUrl" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcurl@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcDriver" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcdriver@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcUsername" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcusername@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcPassword" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcpassword@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeTablePrefix" class="java.lang.String">
		<constructor-arg>
			<value>@protegetableprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeTableSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@protegetablesuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeBigFileThreshold" class="java.lang.Integer">
		<constructor-arg>
			<value>@protegebigfilethreshold@</value>
		</constructor-arg>
	</bean>
	
	<!-- Notes DB Configuration -->
	<bean id="notesJdbcUrl" class="java.lang.String">
		<constructor-arg>
			<value>@notesjdbcurl@</value>
		</constructor-arg>
	</bean>

	<bean id="notesJdbcDriver" class="java.lang.String">
		<constructor-arg>
			<value>@notesjdbcdriver@</value>
		</constructor-arg>
	</bean>

	<bean id="notesJdbcUsername" class="java.lang.String">
		<constructor-arg>
			<value>@notesjdbcusername@</value>
		</constructor-arg>
	</bean>

	<bean id="notesJdbcPassword" class="java.lang.String">
		<constructor-arg>
			<value>@notesjdbcpassword@</value>
		</constructor-arg>
	</bean>

	<!-- Metadata configuration -->
	<bean id="metadataUserInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatauserinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataUserInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatauserinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyDomainInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologydomaininstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyDomainInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologydomaininstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyGroupInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologygroupinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyGroupInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologygroupinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologyinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologyinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyViewInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologyviewinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataOntologyViewInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadataontologyviewinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataVirtualOntologyInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatavirtualontologyinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataVirtualOntologyInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatavirtualontologyinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataVirtualViewInstPrefix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatavirtualviewinstprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="metadataVirtualViewInstSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@metadatavirtualviewinstsuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="oboRepositoriesConfigFilepath" class="java.lang.String">
		<constructor-arg>
			<value>@oborepositoriesconfigfilepath@</value>
		</constructor-arg>
	</bean>
	
	<bean id="returnUrl" class="java.lang.String">
		<constructor-arg>
			<value>@returnUrl@</value>
		</constructor-arg>
	</bean>

	<bean id="allConceptsMaxPageSize" class="java.lang.Integer">
		<constructor-arg>
			<value>@bioportalallconceptsmaxpagesize@</value>
		</constructor-arg>
	</bean>
	
	<!-- RDF directory on the server -->
	<bean id="rdfFilePath" class="java.lang.String">
		<constructor-arg>
			<value>@bioportalrdffilepath@</value>
		</constructor-arg>
	</bean>

	<!-- Notification Configuration -->	 
	<bean id="emailNotificationService"
		class="org.ncbo.stanford.service.notification.impl.EmailNotificationServiceImpl">
		<property name="notificationManagerMap">
			<ref local="notificationManagerMap" />
		</property>
		<property name="ncboUserSubscriptionsDAO">
			<ref local="NcboUserSubscriptionsDAO"/>
		</property>
		<property name="ncboUserDAO">
			<ref local="NcboUserDAO"/>
		</property>
		<property name="textManager">
			<ref local="textManager"/>
		</property> 
	</bean>
	
	<!-- Maps contains the  notificationManagerEmail to the application -->
	<util:map id="notificationManagerMap" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.EMAIL" />
			</key>
			<ref local="notificationManagerEmail" />
		</entry>
	</util:map>

	<bean id="notificationManagerEmail"
		class="org.ncbo.stanford.manager.notification.impl.NotificationManagerEmailImpl">
		<property name="mailService">
			<ref bean="mailService" />
		</property> 
	</bean>
	
	<bean id="notificationAdvice" class="org.ncbo.stanford.aop.notification.NotificationAdvice">
		<property name="emailNotificationService">
			<ref local="emailNotificationService" />
		</property>
		<property name="ontologyService">
			<ref bean="ontologyService" />
		</property>
		<property name="notesService">
			<ref bean="notesService" />
		</property>
		<property name="ncboUserDAO">
			<ref bean="NcboUserDAO" />
		</property>
	</bean>
	
	<!-- Reference implementation, disabled until we need it
	<aop:config>
		<aop:aspect ref="notificationAdvice">
			<aop:pointcut id="aroundService"
				expression="execution(* org.ncbo.stanford.manager.metadata.OntologyMetadataManager.updateOntologyOrView(org.ncbo.stanford.bean.OntologyBean))
                    and args(ontologyBean)" />
			<aop:after-returning pointcut-ref="aroundService" method="adviceUpdateOntology" />
		</aop:aspect>
	</aop:config>
	-->

	<aop:config>
		<aop:aspect id="afterCreateNote" ref="notificationAdvice">
			<aop:pointcut id="afterReturnCreateNote"
				expression="execution(* org.ncbo.stanford.service.notes.NotesService.create*(..))" />
			<aop:after-returning
				pointcut-ref="afterReturnCreateNote"
				returning="note"
				method="adviceCreateNote" />
		</aop:aspect>
	</aop:config>

	<bean id="smtpAuthenticator"
		class="org.ncbo.stanford.util.mail.authenticator.SmtpAuthenticator">
		<constructor-arg value="email@optrasystems.com" />
		<constructor-arg value="password" />
	</bean>
	
	<bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
		<constructor-arg>
			<props>
				<prop key="mail.smptp.auth">true</prop>
				<prop key="mail.smptp.socketFactory.port">25</prop>
				<prop key="mail.smptp.socketFactory.class">javax.net.ssl.SSLSocketFactory
				</prop>
				<prop key="mail.smtp.socketFactory.fallback">false</prop>
			</props>
		</constructor-arg>
		<constructor-arg ref="smtpAuthenticator" />
	</bean>
	
	<bean id="mailsender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="@bioportalsmtpserver@" />
		<property name="session" ref="mailSession" />

	</bean>
	
	<bean id="mailService" class="org.ncbo.stanford.util.mail.impl.MailServiceImpl">
		<property name="mailsender" ref="mailsender" />
	</bean>	
</beans>
