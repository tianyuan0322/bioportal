<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-2.5.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect
				</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.use_outer_join">false</prop>
				<!-- Auto reconnect after long inactivity -->
				<prop key="connection.autoReconnect">true</prop>
				<prop key="connection.autoReconnectForPools">true</prop>
				<prop
					key="connection.is-connection-validation-required">
					true
				</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>
					org/ncbo/stanford/domain/custom/VNcboOntology.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/custom/NcboOntologyQuery.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/custom/NcboTypeDef.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntology.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyVersion.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyFile.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyVersionMetadata.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboUser.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyCategory.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyAdditionalVersionMetadata.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboUserRole.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboLAdditionalMetadata.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboLCategory.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboLRole.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboAdminApplication.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboLAppTextDatatype.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboAppText.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboOntologyLoadQueue.hbm.xml
				</value>
				<value>
					org/ncbo/stanford/domain/generated/NcboLStatus.hbm.xml
				</value>
			</list>
		</property>
	</bean>

	<bean id="jdbcExceptionTranslator"
		class="org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- We are using HibernateTemplate for 90% to 95% or so of database access.
		The JdbcTemplate is for when we can't use Hibernate. 
		Don't use JDBC directly! Use the JdbcTemplate as it handles JDBC cleanup.-->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="jdbcExceptionTranslator">
			<ref bean="jdbcExceptionTranslator" />
		</property>
	</bean>

	<!-- This is the base definition for all Hibernate based DAOs -->
	<bean id="hibernateDaoSupport"
		class="org.springframework.orm.hibernate3.support.HibernateDaoSupport"
		abstract="true">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<!-- You could use the configured Hibernate template or create
			a new mapping that uses a configured hibernate template. 
			HibernateDaoSupport creates a HibernateTempalte with the default settings.
		-->
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<!-- Hibernate Transaction Manager Definition -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!--  Adding annotation Driven for Transcation management -->
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 
		
		<aop:config>
		<aop:pointcut id="ontologyLoadSchedulerMethods" expression="execution(* org.ncbo.stanford.service.loader.scheduler.OntologyLoadSchedulerService.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="ontologyLoadSchedulerMethods"/>
		</aop:config>
		
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<tx:method name="parseOntologies" propagation="NOT_SUPPORTED"/>
		<tx:method name="processRecord" propagation="REQUIRES_NEW"/>
		</tx:attributes>
		</tx:advice>
		
	-->

	<!--  Custom DAOs begin here. Please remove the autogenerated
		DAO bean declaration if you have created a custom DAO 
		that extends the orginial DAO -->
	<bean id="NcboOntologyCategoryDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyCategoryDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyAdditionalVersionMetadataDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyAdditionalVersionMetadataDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyVersionMetadataDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyVersionMetadataDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyVersionDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyVersionDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyFileDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyFileDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUserRoleDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboUserRoleDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboUserDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboUserDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLRoleDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLRoleDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLAdditionalMetadataDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLAdditionalMetadataDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLCategoryDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLCategoryDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboAdminApplicationDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboAdminApplicationDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLAppTextDatatypeDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLAppTextDatatypeDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboAppTextDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboAppTextDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboOntologyLoadQueueDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboOntologyLoadQueueDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<bean id="NcboLStatusDAO"
		class="org.ncbo.stanford.domain.custom.dao.CustomNcboLStatusDAO">
		<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>

	<!-- Encryption -->

	<bean id="stringEncryptor"
		class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="algorithm">
			<value>PBEWithMD5AndTripleDES</value>
		</property>
		<property name="password">
			<ref bean="encryptionKey" />
		</property>
	</bean>

	<bean id="jasyptPasswordEncryptor"
		class="org.jasypt.util.password.StrongPasswordEncryptor" />

	<bean id="passwordEncoder"
		class="org.jasypt.spring.security.PasswordEncoder">
		<property name="passwordEncryptor">
			<ref bean="jasyptPasswordEncryptor" />
		</property>
	</bean>

	<!-- Hibernate String Encryptor -->
	<bean id="hibernateStringEncryptor"
		class="org.jasypt.hibernate.encryptor.HibernatePBEStringEncryptor">
		<property name="registeredName">
			<value>hibernateStringEncryptor</value>
		</property>
		<property name="encryptor">
			<ref bean="stringEncryptor" />
		</property>
	</bean>

	<bean id="encryptionService"
		class="org.ncbo.stanford.service.encryption.impl.EncryptionServiceImpl">
		<property name="stringEncryptor">
			<ref bean="stringEncryptor" />
		</property>
		<property name="passwordEncoder">
			<ref local="passwordEncoder" />
		</property>
	</bean>

	<!-- Encryption ends here -->

	<!-- Message bundle -->
	<bean id="messageBundleName" class="java.lang.String">
		<constructor-arg>
			<value>@messagebundlepackage@</value>
		</constructor-arg>
	</bean>

	<bean id="messageUtils"
		class="org.ncbo.stanford.util.MessageUtils">
		<constructor-arg ref="messageBundleName" index="0" />
	</bean>

	<!-- Ontology format handler map -->
	<util:map id="ontologyFormatHandlerMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_DL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_FULL" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL_LITE" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_PROTEGE" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OBO" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_UMLS_RRF" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_LEXGRID_XML" />
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
		</entry>
	</util:map>

	<!-- Ontology handler maps -->
	<util:map id="ontologyLoadHandlerMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyLoadManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyLoadManagerProtege" />
		</entry>
	</util:map>

	<util:map id="ontologyRetrievalHandlerMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologyRetrievalManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologyRetrievalManagerProtege" />
		</entry>
	</util:map>

	<!-- Manager Wrappers -->
	<bean id="abstractOntologyManagerLexGrid"
		class="org.ncbo.stanford.manager.AbstractOntologyManagerLexGrid"
		abstract="true">
		<property name="ncboOntologyVersionDAO">
			<ref bean="NcboOntologyVersionDAO" />
		</property>
		<property name="ncboOntologyVersionMetadataDAO">
			<ref bean="NcboOntologyVersionMetadataDAO" />
		</property>
	</bean>

	<bean id="abstractOntologyManagerProtege"
		class="org.ncbo.stanford.manager.AbstractOntologyManagerProtege"
		abstract="true">
		<property name="protegeJdbcUrl">
			<ref bean="protegeJdbcUrl" />
		</property>
		<property name="protegeJdbcDriver">
			<ref bean="protegeJdbcDriver" />
		</property>
		<property name="protegeJdbcUsername">
			<ref bean="protegeJdbcUsername" />
		</property>
		<property name="protegeJdbcPassword">
			<ref bean="protegeJdbcPassword" />
		</property>
		<property name="protegeTablePrefix">
			<ref bean="protegeTablePrefix" />
		</property>
		<property name="protegeTableSuffix">
			<ref bean="protegeTableSuffix" />
		</property>
		<property name="protegeBigFileThreshold">
			<ref bean="protegeBigFileThreshold" />
		</property>
		<property name="protegeKnowledgeBases">
			<ref bean="protegeKnowledgeBaseCache" />
		</property>
		<property name="protegeIndexLocation">
			<ref bean="protegeIndexLocation" />
		</property>
	</bean>

	<bean id="ontologyRetrievalManagerLexGrid"
		class="org.ncbo.stanford.manager.retrieval.impl.OntologyRetrievalManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="ontologyRetrievalManagerProtege"
		class="org.ncbo.stanford.manager.retrieval.impl.OntologyRetrievalManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<bean id="ontologyLoadManagerLexGrid"
		class="org.ncbo.stanford.manager.load.impl.OntologyLoadManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="ontologyLoadManagerProtege"
		class="org.ncbo.stanford.manager.load.impl.OntologyLoadManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<!-- Application Services -->
	<bean id="userService"
		class="org.ncbo.stanford.service.user.impl.UserServiceImpl">
		<property name="ncboUserDAO">
			<ref bean="NcboUserDAO" />
		</property>
		<property name="ncboLRoleDAO">
			<ref bean="NcboLRoleDAO" />
		</property>
		<property name="ncboUserRoleDAO">
			<ref bean="NcboUserRoleDAO" />
		</property>
		<property name="encryptionService">
			<ref bean="encryptionService" />
		</property>
	</bean>

	<bean id="conceptService"
		class="org.ncbo.stanford.service.concept.impl.ConceptServiceImpl">
		<property name="ncboOntologyVersionDAO">
			<ref bean="NcboOntologyVersionDAO" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyRetrievalHandlerMap">
			<ref local="ontologyRetrievalHandlerMap" />
		</property>
	</bean>

	<bean id="ontologyService"
		class="org.ncbo.stanford.service.ontology.impl.OntologyServiceImpl">
		<property name="indexService">
			<ref bean="indexSearchService" />
		</property>
		<property name="ncboOntologyDAO">
			<ref bean="NcboOntologyDAO" />
		</property>
		<property name="ncboOntologyVersionDAO">
			<ref bean="NcboOntologyVersionDAO" />
		</property>
		<property name="ncboOntologyVersionMetadataDAO">
			<ref bean="NcboOntologyVersionMetadataDAO" />
		</property>
		<property name="ncboOntologyFileDAO">
			<ref bean="NcboOntologyFileDAO" />
		</property>
		<property name="ncboOntologyCategoryDAO">
			<ref bean="NcboOntologyCategoryDAO" />
		</property>
		<property name="ncboOntologyLoadQueueDAO">
			<ref bean="NcboOntologyLoadQueueDAO" />
		</property>
		<property name="ncboLCategoryDAO">
			<ref bean="NcboLCategoryDAO" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyLoadHandlerMap">
			<ref local="ontologyLoadHandlerMap" />
		</property>
	</bean>

	<bean id="ontologyLoadSchedulerService"
		class="org.ncbo.stanford.service.loader.scheduler.impl.OntologyLoadSchedulerServiceImpl">
		<property name="indexService">
			<ref bean="indexSearchService" />
		</property>
		<property name="ncboOntologyLoadQueueDAO">
			<ref bean="NcboOntologyLoadQueueDAO" />
		</property>
		<property name="ncboOntologyVersionDAO">
			<ref bean="NcboOntologyVersionDAO" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologyLoadHandlerMap">
			<ref local="ontologyLoadHandlerMap" />
		</property>
	</bean>

	<bean id="oboCVSPullService"
		class="org.ncbo.stanford.service.loader.remote.impl.OBOCVSPullServiceImpl">
		<property name="oboSourceforgeCVSUsername">
			<ref bean="oboSourceforgeCVSUsername" />
		</property>
		<property name="oboSourceforgeCVSPassword">
			<ref bean="oboSourceforgeCVSPassword" />
		</property>
		<property name="oboSourceforgeCVSHostname">
			<ref bean="oboSourceforgeCVSHostname" />
		</property>
		<property name="oboSourceforgeCVSModule">
			<ref bean="oboSourceforgeCVSModule" />
		</property>
		<property name="oboSourceforgeCVSRootDirectory">
			<ref bean="oboSourceforgeCVSRootDirectory" />
		</property>
		<property name="oboSourceforgeCVSArgumentString">
			<ref bean="oboSourceforgeCVSArgumentString" />
		</property>
		<property name="oboSourceforgeCVSCheckoutDir">
			<ref bean="oboSourceforgeCVSCheckoutDir" />
		</property>
		<property name="oboSourceforgeCVSDescriptorFile">
			<ref bean="oboSourceforgeCVSDescriptorFile" />
		</property>
		<property name="ontologyService">
			<ref bean="ontologyService" />
		</property>
		<property name="userService">
			<ref bean="userService" />
		</property>
		<property name="ontologyFormatToOBOFoundryMap">
			<ref local="ontologyFormatToOBOFoundryMap" />
		</property>
		<property name="ontologyVersionStatusToOBOFoundryMap">
			<ref local="ontologyVersionStatusToOBOFoundryMap" />
		</property>
		<property name="ontologyFoundryToOBOFoundryMap">
			<ref local="ontologyFoundryToOBOFoundryMap" />
		</property>
		<property name="tempDir">
			<ref bean="tempDir" />
		</property>
	</bean>

	<!-- Search related beans -->
	<bean id="abstractSearchService"
		class="org.ncbo.stanford.service.search.AbstractSearchService"
		abstract="true">
		<property name="analyzer">
			<ref bean="searchAnalyzer" />
		</property>
		<property name="indexPath">
			<ref bean="searchIndexPath" />
		</property>
		<property name="maxNumHits">
			<value>@bioportalsearchmaxnumhits@</value>
		</property>
		<property name="searchResultCache">
			<ref bean="paginatableCache" />
		</property>
	</bean>
	
	<bean id="querySearchService"
		class="org.ncbo.stanford.service.search.impl.QuerySearchServiceImpl"
		parent="abstractSearchService">
	</bean>
	
	<bean id="indexSearchService"
		class="org.ncbo.stanford.service.search.impl.IndexSearchServiceImpl"
		parent="abstractSearchService">
		<property name="indexBackupPath">
			<ref bean="searchIndexBackupPath" />
		</property>
		<property name="indexMergeFactor">
			<value>@bioportalsearchindexmergefactor@</value>
		</property>
		<property name="indexMaxMergeDocs">
			<value>@bioportalsearchindexmaxmergedocs@</value>
		</property>
		<property name="ncboOntologyVersionDAO">
			<ref bean="NcboOntologyVersionDAO" />
		</property>
		<property name="ontologyFormatHandlerMap">
			<ref local="ontologyFormatHandlerMap" />
		</property>
		<property name="ontologySearchHandlerMap">
			<ref local="ontologySearchHandlerMap" />
		</property>
	</bean>

	<bean id="searchAnalyzer"
		class="org.apache.lucene.analysis.standard.StandardAnalyzer" />

	<bean id="searchIndexPath" class="java.lang.String">
		<constructor-arg>
			<value>@bioportalsearchindexpath@</value>
		</constructor-arg>
	</bean>

	<bean id="searchIndexBackupPath" class="java.lang.String">
		<constructor-arg>
			<value>@bioportalsearchindexbackuppath@</value>
		</constructor-arg>
	</bean>

	<util:map id="ontologySearchHandlerMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_LEXGRID" />
			</key>
			<ref local="ontologySearchManagerLexGrid" />
		</entry>
		<entry>
			<key>
				<util:constant
					static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_HANDLER_PROTEGE" />
			</key>
			<ref local="ontologySearchManagerProtege" />
		</entry>
	</util:map>

	<bean id="ontologySearchManagerLexGrid"
		class="org.ncbo.stanford.manager.search.impl.OntologySearchManagerLexGridImpl"
		parent="abstractOntologyManagerLexGrid">
	</bean>

	<bean id="ontologySearchManagerProtege"
		class="org.ncbo.stanford.manager.search.impl.OntologySearchManagerProtegeImpl"
		parent="abstractOntologyManagerProtege">
	</bean>

	<!-- Cache to be used for all paginatable lists, 
		such as ontology lists or search results -->
	<bean id="paginatableExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.NullExpirationHandler" />

	<bean id="paginatableHashbeltContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.StandardHashbeltContainerFactory" />

	<bean id="paginatableCache"
		class="org.ncbo.stanford.util.cache.expiration.system.impl.UpdatingHashbeltExpirationSystem">
		<constructor-arg index="0">
			<value>@bioportalpaginatablecachenumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>@bioportalpaginatablecachetimeout@</value>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="paginatableExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="3">
			<ref bean="paginatableHashbeltContainerFactory" />
		</constructor-arg>
	</bean>

	<!-- Protege knowledge base cache -->
	<bean id="protegeKnowledgeBaseExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.ProtegeKnowledgeBaseExpirationHandler" />

	<bean id="protegeKnowledgeBaseContainerFactoryBase"
		class="org.ncbo.stanford.util.cache.container.impl.FastIteratingHashbeltContainerFactory" />

	<bean id="protegeKnowledgeBaseContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.ProtegeKnowledgeBaseContainerFactory">
		<property name="baseFactory">
			<ref bean="protegeKnowledgeBaseContainerFactoryBase" />
		</property>
	</bean>

	<bean id="protegeKnowledgeBaseCache"
		class="org.ncbo.stanford.util.cache.expiration.system.impl.UpdatingHashbeltExpirationSystem">
		<constructor-arg index="0">
			<value>@protegeknowledgebasecachenumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>@protegeknowledgebasecachetimeout@</value>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="protegeKnowledgeBaseExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="3">
			<ref bean="protegeKnowledgeBaseContainerFactory" />
		</constructor-arg>
	</bean>

	<!-- Session Management -->
	<bean id="sessionExpirationHandler"
		class="org.ncbo.stanford.util.cache.expiration.handler.impl.SimpleExpirationHandler" />

	<bean id="sessionHashbeltContainerFactory"
		class="org.ncbo.stanford.util.cache.container.impl.HashlistBasedHashbeltContainerFactory" />

	<bean id="sessionService"
		class="org.ncbo.stanford.service.session.impl.SessionServiceImpl">
		<constructor-arg index="0">
			<value>@bioportalsessionnumcontainers@</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>@bioportalsessiontimeout@</value>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="sessionExpirationHandler" />
		</constructor-arg>
		<constructor-arg index="3">
			<ref bean="sessionHashbeltContainerFactory" />
		</constructor-arg>
	</bean>

	<bean id="textManager"
		class="org.ncbo.stanford.util.textmanager.service.impl.TextManagerImpl">
		<property name="ncboAppTextDAO">
			<ref bean="NcboAppTextDAO" />
		</property>
	</bean>

	<bean id="xmlSerializationService"
		class="org.ncbo.stanford.service.xml.impl.XMLSerializationServiceImpl">
		<property name="xmlSerializer">
			<ref bean="xmlSerializer" />
		</property>
	</bean>

	<bean id="xmlSerializer"
		class="com.thoughtworks.xstream.XStream">
	</bean>

	<!-- Scheduled Jobs -->

	<!-- Ontology parse scheduler -->
	<bean id="ontologyParseSchedulerJobDetailBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject"
			ref="ontologyLoadSchedulerService" />
		<property name="targetMethod" value="parseOntologies" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="ontologyParseCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail"
			ref="ontologyParseSchedulerJobDetailBean" />
		<property name="cronExpression">
			<value>@ontologyparseschedulercronexpression@</value>
		</property>
	</bean>

	<bean id="ontologyParseSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName"
			value="ontologyParseSchedulerFactoryBean" />
		<property name="overwriteExistingJobs">
			<value>true</value>
		</property>
		<property name="waitForJobsToCompleteOnShutdown">
			<value>true</value>
		</property>
		<property name="triggers">
			<list>
				<ref bean="ontologyParseCronTrigger" />
			</list>
		</property>
		<property name="autoStartup">
			<ref bean="ontologyParseSchedulerAutoStartup" />
		</property>
	</bean>

	<bean id="ontologyParseSchedulerAutoStartup"
		class="java.lang.Boolean">
		<constructor-arg>
			<value>@ontologyparseschedulerenabled@</value>
		</constructor-arg>
	</bean>

	<!-- OBO CVS pull scheduler -->
	<bean id="oboPullSchedulerJobDetailBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="oboCVSPullService" />
		<property name="targetMethod" value="doCVSPull" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="oboPullCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="oboPullSchedulerJobDetailBean" />
		<property name="cronExpression">
			<value>@obopullschedulercronexpression@</value>
		</property>
	</bean>

	<bean id="oboPullSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName"
			value="oboPullSchedulerFactoryBean" />
		<property name="overwriteExistingJobs">
			<value>true</value>
		</property>
		<property name="waitForJobsToCompleteOnShutdown">
			<value>true</value>
		</property>
		<property name="triggers">
			<list>
				<ref bean="oboPullCronTrigger" />
			</list>
		</property>
		<property name="autoStartup">
			<ref bean="oboPullSchedulerAutoStartup" />
		</property>
	</bean>

	<bean id="oboPullSchedulerAutoStartup" class="java.lang.Boolean">
		<constructor-arg>
			<value>@obopullschedulerenabled@</value>
		</constructor-arg>
	</bean>

	<!-- Constants -->

	<!-- Maps format in the OBO Foundry to the application ontology formats -->
	<util:map id="ontologyFormatToOBOFoundryMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>obo</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OBO" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>owl</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_OWL" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>protege</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FORMAT_PROTEGE" />
		</entry>
	</util:map>

	<!-- Maps status in OBO Foundry to the application version status -->
	<util:map id="ontologyVersionStatusToOBOFoundryMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Active</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Inactive</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Production and review</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Discussion and review</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Quiescent</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.VERSION_STATUS_PREPRODUCTION" />
		</entry>
	</util:map>

	<!-- Maps foundry preference in OBO Foundry to the application TRUE/FALSE status -->
	<util:map id="ontologyFoundryToOBOFoundryMap"
		map-class="java.util.HashMap">
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>Yes</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.TRUE" />
		</entry>
		<entry>
			<key>
				<bean class="java.lang.String">
					<constructor-arg>
						<value>No</value>
					</constructor-arg>
				</bean>
			</key>
			<util:constant
				static-field="org.ncbo.stanford.util.constants.ApplicationConstants.FALSE" />
		</entry>
	</util:map>

	<!-- Encryption Key -->
	<bean id="encryptionKey" class="java.lang.String">
		<constructor-arg>
			<value>@encryptionkey@</value>
		</constructor-arg>
	</bean>

	<!-- Temporary directory on the server -->
	<bean id="tempDir" class="java.lang.String">
		<constructor-arg>
			<value>@bioportaltempdir@</value>
		</constructor-arg>
	</bean>

	<!-- Protege Lucene index location -->
	<bean id="protegeIndexLocation" class="java.lang.String">
		<constructor-arg>
			<value>@protegeindexlocation@</value>
		</constructor-arg>
	</bean>

	<!-- Protege DB Configuation -->
	<bean id="protegeJdbcUrl" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcurl@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcDriver" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcdriver@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcUsername" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcusername@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeJdbcPassword" class="java.lang.String">
		<constructor-arg>
			<value>@protegejdbcpassword@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeTablePrefix" class="java.lang.String">
		<constructor-arg>
			<value>@protegetableprefix@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeTableSuffix" class="java.lang.String">
		<constructor-arg>
			<value>@protegetablesuffix@</value>
		</constructor-arg>
	</bean>

	<bean id="protegeBigFileThreshold" class="java.lang.Integer">
		<constructor-arg>
			<value>@protegebigfilethreshold@</value>
		</constructor-arg>
	</bean>

	<!-- OBO Sourceforge CVS properties -->
	<bean id="oboSourceforgeCVSUsername" class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvsusername@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSPassword" class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvspassword@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSHostname" class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvshostname@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSModule" class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvsmodule@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSRootDirectory"
		class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvsrootdirectory@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSArgumentString"
		class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvsargumentstring@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSCheckoutDir" class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvscheckoutdir@</value>
		</constructor-arg>
	</bean>

	<bean id="oboSourceforgeCVSDescriptorFile"
		class="java.lang.String">
		<constructor-arg>
			<value>@obosourceforgecvsdescriptorfile@</value>
		</constructor-arg>
	</bean>
</beans>